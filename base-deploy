#!/usr/bin/env bash

# shellcheck source=lib/common.sh
. "${LIB_DIR:-$(cd "${0%/*}/lib"&&pwd)}/common.sh"

# Deploy Multicall (no solc optimization)
dappBuild multicall
MULTICALL=$(dappCreate multicall Multicall)

# Deploy Token Faucet (no solc optimization)
dappBuild token-faucet
test -z "$FAUCET" && FAUCET=$(dappCreate token-faucet TokenFaucet "$(seth --to-uint256 "$(seth --to-wei 50 ETH)")")

# Deploy Guard for Gov and IOU tokens (no solc optimization)
dappBuild ds-guard
MCD_GOV_GUARD=$(dappCreate ds-guard DSGuard)

# Deploy Gov token and Chief (no solc optimization)
dappBuild ds-chief

if [[ -z "$MCD_GOV" ]]; then
    MCD_GOV=$(dappCreate ds-chief DSToken "$(seth --to-bytes32 "$(seth --from-ascii "MKR")")")
    export MCD_GOV
    seth send "$MCD_GOV" 'mint(address,uint256)' "$FAUCET" "$(seth --to-uint256 "$(seth --to-wei 1000000 ETH)")"
    seth send "$FAUCET" 'gulp(address)' "$MCD_GOV"
fi

MCD_IOU=$(dappCreate ds-chief DSToken "$(seth --to-bytes32 "$(seth --from-ascii "IOU")")")
seth send "$MCD_GOV" 'setAuthority(address)' "$MCD_GOV_GUARD"
seth send "$MCD_IOU" 'setAuthority(address)' "$MCD_GOV_GUARD"
MCD_ADM=$(dappCreate ds-chief DSChief "$MCD_GOV" "$MCD_IOU" 5)
export MCD_ADM
seth send "$MCD_GOV_GUARD" 'permit(address,address,bytes32)' "$MCD_ADM" "$MCD_IOU" "$(seth --to-bytes32  "$(seth sig 'mint(address,uint256)')")"
seth send "$MCD_GOV_GUARD" 'permit(address,address,bytes32)' "$MCD_ADM" "$MCD_IOU" "$(seth --to-bytes32  "$(seth sig 'burn(address,uint256)')")"
seth send "$MCD_GOV" 'approve(address,uint256)' "$MCD_ADM" 1
seth send "$MCD_ADM" 'lock(uint256)' 1
seth send "$MCD_ADM" 'vote(address[] memory)' ["${ETH_FROM#0x}"]
seth send "$MCD_ADM" 'lift(address)' "$ETH_FROM"

# Deploy Vote Proxy Factory (no solc optimization)
dappBuild vote-proxy --use solc:0.4.25
VOTE_PROXY_FACTORY=$(dappCreate vote-proxy VoteProxyFactory "$MCD_ADM")

# Deploy ProxyRegistry (no solc optimization)
dappBuild proxy-registry
PROXY_FACTORY=$(dappCreate proxy-registry DSProxyFactory)
PROXY_REGISTRY=$(dappCreate proxy-registry ProxyRegistry "$PROXY_FACTORY")

PATH="$DAPP_LIB/dss-deploy/bin:$PATH"

# Deploy Fabs (no solc optimization)
deploy-fab
# shellcheck source=/dev/null
. "load-fab-$(seth chain)"
rm "load-fab-$(seth chain)"

# Set the pause delay to 0 in order to make the needed initial configurations
export MCD_PAUSE_DELAY=0

# Deploy MCD Core Contratcs (solc optimized)
deploy-core
# shellcheck source=/dev/null
. "load-mcd-$(seth chain)"
rm "load-mcd-$(seth chain)"

# Deploy Collaterals (no solc optimization)
tokens=$(jq -r ".tokens | keys_unsorted[]" "$CONFIG_FILE")
for token in $tokens; do
    ilks=$(jq -r ".tokens.${token}.ilks | keys_unsorted[]" "$CONFIG_FILE")
    for ilk in $ilks; do
        if [[ -z "$(eval echo "\$$token")" ]]; then
            # It means the ilk token will be created now in the next deployment script call, then we can send funds to the Faucet
            newToken=true
        else
            newToken=false
        fi

        deploy-ilk-"$(echo "$token" | tr '[:upper:]' '[:lower:]')" "$ilk"

        # shellcheck source=/dev/null
        . "load-ilk-$(echo "$token" | tr '[:upper:]' '[:lower:]')-$(echo "$ilk" | tr '[:upper:]' '[:lower:]')-$(seth chain)"
        rm "load-ilk-$(echo "$token" | tr '[:upper:]' '[:lower:]')-$(echo "$ilk" | tr '[:upper:]' '[:lower:]')-$(seth chain)"

        if [[ "$token" != "ETH" && "$newToken" == true ]]; then
            seth send "$(eval echo "\$$token")" 'transfer(address,uint256)' "$FAUCET" "$(seth --to-uint256 "$(seth --to-wei 999000 ETH)")"
        fi
        export SKIP_BUILD=true
    done
done

# As all initial collaterals were deployed, we can remove authority of the deployment contract from the core contracts
seth send "$MCD_DEPLOY" 'releaseAuth()'
for token in $tokens; do
    ilks=$(jq -r ".tokens.${token}.ilks | keys_unsorted[]" "$CONFIG_FILE")
    for ilk in $ilks; do
        seth send "$MCD_DEPLOY" 'releaseAuthFlip(bytes32)' "$(seth --to-bytes32 "$(seth --from-ascii "${token}-${ilk}")")"
    done
done

# Deploy Pause Plan - Library functions for the Pause (no solc optimization)
MCD_GOV_ACTIONS=$(dappCreate dss-deploy GovActions)

unset SKIP_BUILD

dappBuild dss-proxy-actions

# Deploy Proxy Actions (no solc optimization)
PROXY_ACTIONS=$(dappCreate dss-proxy-actions DssProxyActions)

# Deploy CdpManager (no solc optimization)
CDP_MANAGER=$(dappCreate dss-proxy-actions DssCdpManager "$MCD_VAT")
GET_CDPS=$(dappCreate dss-proxy-actions GetCdps)

# Allow Flop to mint Gov token
seth send "$MCD_GOV_GUARD" 'permit(address,address,bytes32)' "$MCD_FLOP" "$MCD_GOV" "$(seth --to-bytes32 "$(seth sig 'mint(address,uint256)')")"

# Deploy Pause Proxy Actions (support contract for executing initial set up of the dss system)
dappBuild testchain-pause-proxy-actions

PROXY_PAUSE_ACTIONS=$(dappCreate testchain-pause-proxy-actions TestchainPauseProxyActions)
seth send "$PROXY_REGISTRY" 'build()'

# Get a proxy for the deployer address
PROXY_DEPLOYER=0x"$(seth call "$PROXY_REGISTRY" 'proxies(address)(address)' "$ETH_FROM")"

# Elect the proxy address as the new chief hat
seth send "$MCD_ADM" 'vote(address[] memory)' ["${PROXY_DEPLOYER#0x}"]
seth send "$MCD_ADM" 'lift(address)' "$PROXY_DEPLOYER"

# Copy dss-deploy abi files
copyAbis dss-deploy

for token in $tokens; do
    ILKS_VARS+=",
    \"${token}\": \"$(eval echo "\$${token}")\""
    if [[ "$(eval echo "\$VAL_${token}")" != "" ]]; then
    ILKS_VARS+=",
    \"VAL_${token}\": \"$(eval echo "\$VAL_${token}")\""
    fi
    ILKS_VARS+=",
    \"PIP_${token}\": \"$(eval echo "\$PIP_${token}")\""
    ilks=$(jq -r ".tokens.${token}.ilks | keys_unsorted[]" "$CONFIG_FILE")
    for ilk in $ilks; do
    ILKS_VARS+=",
    \"MCD_JOIN_${token}_${ilk}\": \"$(eval echo "\$MCD_JOIN_${token}_${ilk}")\""
    ILKS_VARS+=",
    \"MCD_FLIP_${token}_${ilk}\": \"$(eval echo "\$MCD_FLIP_${token}_${ilk}")\""
    done
done

# Generate addresses.json file
cat > "$OUT_DIR"/addresses.json <<EOF
{
    "ETH_FROM": "$ETH_FROM",
    "MULTICALL": "$MULTICALL",
    "FAUCET": "$FAUCET",
    "MCD_DEPLOY": "$MCD_DEPLOY",
    "MCD_GOV": "$MCD_GOV",
    "MCD_GOV_GUARD": "$MCD_GOV_GUARD",
    "MCD_IOU": "$MCD_IOU",
    "MCD_ADM": "$MCD_ADM",
    "VOTE_PROXY_FACTORY": "$VOTE_PROXY_FACTORY",
    "MCD_VAT": "$MCD_VAT",
    "MCD_JUG": "$MCD_JUG",
    "MCD_CAT": "$MCD_CAT",
    "MCD_VOW": "$MCD_VOW",
    "MCD_JOIN_DAI": "$MCD_JOIN_DAI",
    "MCD_FLAP": "$MCD_FLAP",
    "MCD_FLOP": "$MCD_FLOP",
    "MCD_PAUSE": "$MCD_PAUSE",
    "MCD_GOV_ACTIONS": "$MCD_GOV_ACTIONS",
    "MCD_DAI": "$MCD_DAI",
    "MCD_SPOT": "$MCD_SPOT",
    "MCD_POT": "$MCD_POT",
    "MCD_END": "$MCD_END",
    "PROXY_ACTIONS": "$PROXY_ACTIONS",
    "CDP_MANAGER": "$CDP_MANAGER",
    "GET_CDPS": "$GET_CDPS",
    "PROXY_FACTORY": "$PROXY_FACTORY",
    "PROXY_REGISTRY": "$PROXY_REGISTRY"$ILKS_VARS,
    "PROXY_PAUSE_ACTIONS": "$PROXY_PAUSE_ACTIONS",
    "PROXY_DEPLOYER": "$PROXY_DEPLOYER"
}
EOF

# shellcheck source=/dev/null
"$LIBEXEC_DIR"/set-line

# shellcheck source=/dev/null
"$LIBEXEC_DIR"/set-wait

# shellcheck source=/dev/null
"$LIBEXEC_DIR"/set-bump

# shellcheck source=/dev/null
"$LIBEXEC_DIR"/set-sump

# shellcheck source=/dev/null
"$LIBEXEC_DIR"/set-hump

# shellcheck source=/dev/null
"$LIBEXEC_DIR"/set-beg "flap"

# shellcheck source=/dev/null
"$LIBEXEC_DIR"/set-ttl "flap"

# shellcheck source=/dev/null
"$LIBEXEC_DIR"/set-tau "flap"

# shellcheck source=/dev/null
"$LIBEXEC_DIR"/set-beg "flop"

# shellcheck source=/dev/null
"$LIBEXEC_DIR"/set-ttl "flop"

# shellcheck source=/dev/null
"$LIBEXEC_DIR"/set-tau "flop"

echo "BASE DEPLOY COMPLETED SUCCESSFULLY"
