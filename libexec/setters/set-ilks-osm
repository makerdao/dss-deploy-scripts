#!/usr/bin/env bash

#  Copyright (C) 2019-2021 Maker Ecosystem Growth Holdings, INC.

#  This program is free software: you can redistribute it and/or modify
#  it under the terms of the GNU Affero General Public License as published by
#  the Free Software Foundation, either version 3 of the License, or
#  (at your option) any later version.

#  This program is distributed in the hope that it will be useful,
#  but WITHOUT ANY WARRANTY; without even the implied warranty of
#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#  GNU Affero General Public License for more details.

#  You should have received a copy of the GNU Affero General Public License
#  along with this program.  If not, see <https://www.gnu.org/licenses/>.

# shellcheck source=lib/common.sh
. "$LIB_DIR/common.sh"

# Get config variables
CONFIG_FILE="$OUT_DIR/config.json"
# Get addresses
loadAddresses

log "SET ILKS OSM:"

tokens=$(jq -r ".tokens | keys_unsorted[]" "$CONFIG_FILE")
for token in $tokens; do
    pipAddr=$(jq -r ".tokens.${token} | .import.pip | values" "$CONFIG_FILE")
    if [[ "$pipAddr" == "" ]]; then
        osmDelay=$(jq -r ".tokens.${token} | .pipDeploy | .osmDelay" "$CONFIG_FILE")
        if [[ "$osmDelay" -gt 0 ]]; then
            # Deploy OSM
            osm=$(dappCreate osm OSM "$(eval echo "\$VAL_${token}")")
            eval "export PIP_${token}=${osm}"
            log "PIP_${token}=$osm"
            # Set OSM delay
            sethSend "$osm" 'step(uint16)' "$osmDelay"
            # Whitelist OSM in Medianizer (skip if source is DSValue)
            type=$(jq -r ".tokens.${token} | .pipDeploy | .type | values" "$CONFIG_FILE")
            [[ "$type" == "median" ]] && sethSend "$(eval echo "\$VAL_${token}")" 'kiss(address)' "$osm"
            # Whithelist Spotter in OSM
            sethSend "$osm" 'kiss(address)' "$MCD_SPOT"
            # Whithelist End in OSM
            sethSend "$osm" 'kiss(address)' "$MCD_END"
            # Set osm in spotter ilks
            ilks=$(jq -r ".tokens.${token}.ilks | keys_unsorted[]" "$CONFIG_FILE")
            for ilk in $ilks; do
                flipDeploy="$(jq ".tokens.${token}.ilks.${ilk} | .flipDeploy!=null" "$CONFIG_FILE")"
                if [[ "$flipDeploy" == false ]]; then
                    sethSend "$osm" 'kiss(address)' "$(eval echo "\$MCD_CLIP_${token}_${ilk}")"
                    sethSend "$osm" 'kiss(address)' "$CLIPPER_MOM"
                fi

                calldata="$(seth calldata 'file(address,address,address,bytes32,bytes32,address)' "$MCD_PAUSE" "$MCD_GOV_ACTIONS" "$MCD_SPOT" "$(seth --to-bytes32 "$(seth --from-ascii "${token}-${ilk}")")" "$(seth --to-bytes32 "$(seth --from-ascii "pip")")" "$osm")"
                sethSend "$PROXY_DEPLOYER" 'execute(address,bytes memory)' "$PROXY_PAUSE_ACTIONS" "$calldata"
            done
        fi
    fi
done

for token in $tokens; do
addAddresses <<EOF
{
    "PIP_${token}": "$(eval echo "\$PIP_${token}")"
}
EOF
done
