#!/usr/bin/env bash

# shellcheck source=lib/common.sh
. "${LIB_DIR:-$(cd "${0%/*}/../lib"&&pwd)}/common.sh"

# Get config variables
CONFIG_FILE="$OUT_DIR/config.json"
# Get addresses
loadAddresses

set +x

# shellcheck disable=SC2034
AUTHED="0x0000000000000000000000000000000000000000000000000000000000000001"
# shellcheck disable=SC2034
NOT_AUTHED="0x0000000000000000000000000000000000000000000000000000000000000000"
GREEN='\033[0;32m'
RED='\033[0;31m'
NC='\033[0m' # No Color

ok() {
    printf '%b\n' "${GREEN}OK${NC}"
}

err() {
    printf '%b\n' "${RED}NOT OK${NC}"
}

checkRely() {
    local CHECK
    CHECK=$(seth call "${!1}" 'wards(address)' "${!2}")

    printf "RELY: %s -> %s -> %s -> " "${1}" "${2}" "${3}"
    if [[ "${!3}" == "$CHECK" ]]; then
        ok
    else
        err
    fi
}

checkAuthority() {
    local CHECK
    CHECK=$(seth call "${!1}" 'authority()(address)')

    printf "AUTH: %s -> %s -> " "${1}" "${2}"
    if [[ "${!2}" == "0x${CHECK}" ]]; then
        ok
    else
        err
    fi
}

checkOwner() {
    local CHECK
    CHECK=$(seth call "${!1}" 'owner()(address)')

    printf "OWN: %s -> %s -> " "${1}" "${2}"
    if [[ "$2" == "0x${CHECK}" ]]; then
        ok
    else
        err
    fi
}

canCall() {
    local authority
    local CHECK
    authority=$(seth call "${!2}" 'authority()(address)')
    CHECK=$(seth call "0x${authority}" 'canCall(address,address,bytes4)(bool)' "${!1}" "${!2}" "$(seth sig "$3")")

    printf "CALL: %s -> %s -> %s -> " "${1}" "${2}" "${3}"
    if [[ $CHECK == true ]]; then
        ok
    else
        err
    fi
}

# vat
checkRely "MCD_VAT" "MCD_DEPLOY" "NOT_AUTHED"
checkRely "MCD_VAT" "MCD_VOW" "AUTHED"
checkRely "MCD_VAT" "MCD_CAT" "AUTHED"
checkRely "MCD_VAT" "MCD_JUG" "AUTHED"
checkRely "MCD_VAT" "MCD_SPOT" "AUTHED"
checkRely "MCD_VAT" "MCD_END" "AUTHED"
checkRely "MCD_VAT" "MCD_PAUSE_PROXY" "AUTHED"
tokens=$(jq -r ".tokens | keys_unsorted[]" "$CONFIG_FILE")
for token in $tokens; do
    ilks=$(jq -r ".tokens.${token}.ilks | keys_unsorted[]" "$CONFIG_FILE")
    for ilk in $ilks; do
        checkRely "MCD_VAT" "MCD_JOIN_${token}_${ilk}" "AUTHED"
    done
done

# cat
checkRely "MCD_CAT" "MCD_DEPLOY" "NOT_AUTHED"
checkRely "MCD_CAT" "MCD_END" "AUTHED"
checkRely "MCD_CAT" "MCD_PAUSE_PROXY" "AUTHED"

# vow
checkRely "MCD_VOW" "MCD_DEPLOY" "NOT_AUTHED"
checkRely "MCD_VOW" "MCD_CAT" "AUTHED"
checkRely "MCD_VOW" "MCD_END" "AUTHED"
checkRely "MCD_VOW" "MCD_PAUSE_PROXY" "AUTHED"

# jug
checkRely "MCD_JUG" "MCD_DEPLOY" "NOT_AUTHED"
checkRely "MCD_JUG" "MCD_PAUSE_PROXY" "AUTHED"

# pot
checkRely "MCD_POT" "MCD_DEPLOY" "NOT_AUTHED"
checkRely "MCD_POT" "MCD_PAUSE_PROXY" "AUTHED"

# dai
checkRely "MCD_DAI" "MCD_DEPLOY" "NOT_AUTHED"

# spotter
checkRely "MCD_SPOT" "MCD_DEPLOY" "NOT_AUTHED"
checkRely "MCD_SPOT" "MCD_PAUSE_PROXY" "AUTHED"

# flap
checkRely "MCD_FLAP" "MCD_DEPLOY" "NOT_AUTHED"
checkRely "MCD_FLAP" "MCD_VOW" "AUTHED"
checkRely "MCD_FLAP" "MCD_PAUSE_PROXY" "AUTHED"

# flop
checkRely "MCD_FLOP" "MCD_DEPLOY" "NOT_AUTHED"
checkRely "MCD_FLOP" "MCD_VOW" "AUTHED"
checkRely "MCD_FLOP" "MCD_PAUSE_PROXY" "AUTHED"

# end
checkRely "MCD_END" "MCD_DEPLOY" "NOT_AUTHED"
checkRely "MCD_END" "MCD_ESM" "AUTHED"
checkRely "MCD_END" "MCD_PAUSE_PROXY" "AUTHED"

#flips
for token in $tokens; do
    ilks=$(jq -r ".tokens.${token}.ilks | keys_unsorted[]" "$CONFIG_FILE")
    for ilk in $ilks; do
        checkRely "MCD_FLIP_${token}_${ilk}" "MCD_DEPLOY" "NOT_AUTHED"
        checkRely "MCD_FLIP_${token}_${ilk}" "MCD_END" "AUTHED"
        checkRely "MCD_FLIP_${token}_${ilk}" "MCD_PAUSE_PROXY" "AUTHED"
    done
done

# pause
checkOwner "MCD_PAUSE" "0x0000000000000000000000000000000000000000"
checkAuthority "MCD_PAUSE" "MCD_ADM"

# chief
checkOwner "MCD_ADM" "0x0000000000000000000000000000000000000000"
checkAuthority "MCD_ADM" "MCD_ADM"

# iou
checkOwner "MCD_IOU" "0x0000000000000000000000000000000000000000"

# gov guard
checkOwner "MCD_GOV_GUARD" "0x0000000000000000000000000000000000000000"

# gov
canCall "MCD_FLOP" "MCD_GOV" "mint(address,uint256)"
canCall "MCD_ADM" "MCD_IOU" "mint(address,uint256)"
canCall "MCD_ADM" "MCD_IOU" "mint(address,uint256)"
